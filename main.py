import logging
import hashlib
import time
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils import executor

logging.basicConfig(level=logging.INFO)

TOKEN = '6401855105:AAGUkgOmQzVCt91hsHVwyRyI4ez3V19bx5o'
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

ADMIN_CODE = '202413'
admin_users = {1091591701}
admin_chat_id = 1091591701
course_links = {
    "18+ kurs": "https://example.com",
    "Professional kurs": "",
    "<<–î—É—à–∞ –∏ —Ç–µ–ª–æ>>": "",
    "<<Vaginizm va unga yechim!>> Psixoterapevtik kurs": ""
}
course_info = {
    "18+ kurs": "18+ kurs haqida ma'lumot",
    "Professional kurs": "Professional kurs haqida ma'lumot",
    "<<–î—É—à–∞ –∏ —Ç–µ–ª–æ>>": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—É—Ä—Å–µ <<–î—É—à–∞ –∏ —Ç–µ–ª–æ>>",
    "<<Vaginizm va unga yechim!>> Psixoterapevtik kurs": "Vaginizm va unga yechim! kurs haqida ma'lumot"
}
pending_payments = {}
user_tokens = {}

class ConsultationForm(StatesGroup):
    name = State()
    phone_number = State()
    advance_payment = State()
    payment_proof = State()

def generate_token(user_id, course):
    token = hashlib.sha256(f'{user_id}{course}{time.time()}'.encode()).hexdigest()
    user_tokens[token] = {"user_id": user_id, "course": course, "timestamp": time.time()}
    return token

@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üë§Men haqimda"))
    keyboard.add(KeyboardButton("üìöKurslar"), KeyboardButton("üìùKonsultatsiyaga yozilish"))
    keyboard.add(KeyboardButton("Vaginizm va unga yechim paket"), KeyboardButton("Psixoterapiya"))
    keyboard.add(KeyboardButton("üìûAdmin"))

    video_note_id = "DQACAgIAAxkBAAIRRWck6YbJa319zK9HcZbbjh9ar-NFAAJDXQACgKgQSUbCVVx8Ne1cNgQ"
    await message.answer_video_note(video_note=video_note_id)
    await message.answer(
        'Assalomu alaykumüòä\n\nMening rasmiy Telegram botimga xush kelibsiz! '
        'Bu yerda siz maxsus yopiq kurslar, vebinar va seminarlar uchun to ªlovni amalga oshirishingiz mumkin.\n\n'
        'O ªzingizga kerakli bo ªlimni tanlang‚¨áÔ∏è', reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üë§Men haqimda")
async def about_me(message: types.Message):
    try:
        with open('test.jpg', 'rb') as photo:
            await message.answer_photo(photo, caption=(
                "Men Nadia Abdullaxodjayeva Abdukadirovna, ko ªp yillik tajribaga ega reproduktiv psixologman...\n"
            ))
    except Exception as e:
        await message.answer(f"Rasm yuklashda xatolik: {e}")

@dp.message_handler(lambda message: message.text == "üìöKurslar")
async def courses(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üîû18+ kurs", callback_data='info_18+ kurs'),
        InlineKeyboardButton("üìîProfessional kurs", callback_data='info_Professional kurs'),
        InlineKeyboardButton("Geysha Sirlari", callback_data='info_Geysha_sirlari')
    )
    await message.answer("Kursni tanlang:", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == "üìûAdmin")
async def admin_contact(message: types.Message):
    await message.answer('Administrator bilan boglanish uchun shu yerga yozing: @nadia_admini\n'
                         'Administrator bilan boglanish uchun telefon raqam: +998 95 049 33 33')

@dp.message_handler(lambda message: message.text == "üìùKonsultatsiyaga yozilish")
async def consultations(message: types.Message):
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("Ro'yxatdan o'tish", callback_data='info_royxatdan_otish'))
    await message.answer("""
–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏–∑ –æ—Ñ–ª–∞–π–Ω –≤–∞ –æ–Ω–ª–∞–π–Ω —Ç–∞—Ä–∑–¥–∞ –±–æ–ª–∞–¥–∏.

–¢—É–ª–æ–≤ —à–∞—Ä—Ç–ª–∞—Ä–∏:

30 - 40 –º–∏–Ω—É—Ç - 790–º–∏–Ω–≥ —Å—É–º (1 –∫–∏—à–∏ —É—á—É–Ω)

1 —Å–æ–∞—Ç - 1.190.000 —Å—É–º (1 –∫–∏—à–∏ —É—á—É–Ω)

–≠—Ä –≤–∞ –•–æ—Ç–∏–Ω–ª–∞—Ä —É—á—É–Ω - 1.390.000 —Å—É–º 1 —Å–æ–∞—Ç 

–®–∞—Ä—Ç–ª–∞—Ä:

1 - –ò—Å–∏–º –≤–∞ –§–∞–º–∏–ª–∏—è
2 - –¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞–∫–∞–º–∏
3 - –û–ª–¥–∏–Ω–¥–∞–Ω 50% —Ç—É–ª–æ–≤ (–æ—Ñ–ª–∞–π–Ω —É—á—É–Ω) 
4 - –¢—É–ª–∞–Ω–≥–∞–Ω —Ö–∞–∫–∏–¥–∞ —á–µ–∫
5 - –£—á—Ä–∞—à—É–≤ –º–∞–Ω–∑–∏–ª–∏ —Ö–∞–∫–∏–¥–∞ –∫–µ–ª–∏—à–∏–± –æ–ª–∏–Ω–∞–¥–∏

–ö–æ—à–∏–º—á–∞ –º–∞–ª—É–º–æ—Ç: 

1 - –ê–≤–∞–Ω—Å —Ç—É–ª–æ–≤ –∫–∏–ª–∏–Ω–≥–∞–Ω–¥–∞–Ω –∫–µ–≥–∏–Ω, –∫–µ–ª–∞ –æ–ª–æ–ª–º–∞—Å–∞–Ω–≥–∏–∑, —Ç—É–ª–æ–≤ –∫–∞–π—Ç–∏—Ä–∏–ª–º–∞–π–¥–∏. 

2 - –û—Ñ—Ñ–ª–∞–π–Ω —É—á—Ä–∞—à—É–≤–≥–∞ –∫–µ–ª–∞ –æ–ª–º–∞—Å–∞–Ω–≥–∏–∑ —É—á—Ä–∞—à—É–≤–¥–∞–Ω 2 —Å–æ–∞—Ç –æ–ª–¥–∏–Ω –æ–≥–æ—Ö–ª–∞–Ω—Ç–∏—Ä–∏—à –ª–æ–∑–∏–º, —à—É–Ω–¥–∞ –∫–∞–±—É–ª–Ω–∏ –±–æ—à–∫–∞ –∫—É–Ω –≤–∞ —Å–æ–∞—Ç–≥–∞ –∫—É—á–∏—Ä–∏–± –∫—É—è–º–∏–∑!""", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'info_royxatdan_otish')
async def start_registration(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ò–ª—Ç–∏–º–æ—Å, –∏—Å–º –≤–∞ —Ñ–∞–º–∏–ª–∏—è –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await ConsultationForm.name.set()

@dp.message_handler(state=ConsultationForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–¢–µ–ª–µ—Ñ–æ–Ω —Ä–∞“õ–∞–º–∏–Ω–≥–∏–∑–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥:")
    await ConsultationForm.phone_number.set()

@dp.message_handler(state=ConsultationForm.phone_number)
async def process_phone_number(message: types.Message, state: FSMContext):
    await state.update_data(phone_number=message.text)
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(InlineKeyboardButton("To'lov qilish", callback_data='pay_advance'))
    await message.answer("–ò–ª—Ç–∏–º–æ—Å, 50% —Ç—û–ª–æ–≤–Ω–∏ –∞–º–∞–ª–≥–∞ –æ—à–∏—Ä–∏–Ω–≥:", reply_markup=keyboard)
    await ConsultationForm.advance_payment.set()

@dp.callback_query_handler(lambda c: c.data == 'pay_advance', state=ConsultationForm.advance_payment)
async def ask_for_proof(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–ò–ª—Ç–∏–º–æ—Å, —Ç—û–ª–æ–≤–Ω–∏ –∞–º–∞–ª–≥–∞ –æ—à–∏—Ä–≥–∞–Ω–∏–Ω–≥–∏–∑ “≥–∞“õ–∏–¥–∞ —á–µ–∫–Ω–∏ —é–±–æ—Ä–∏–Ω–≥:")
    await ConsultationForm.payment_proof.set()

@dp.message_handler(content_types=['photo'], state=ConsultationForm.payment_proof)
async def process_payment_proof(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id  # Rasm ID sini olish
    await bot.send_photo(chat_id=admin_chat_id, photo=photo_id, caption="Yangi to'lov tasdiqlash uchun.")
    await message.answer("–¢—û–ª–æ–≤ —á–µ–≥–∏–Ω–≥–∏–∑ “õ–∞–±—É–ª “õ–∏–ª–∏–Ω–¥–∏. –£—á—Ä–∞—à—É–≤ –º–∞–Ω–∑–∏–ª–∏ “≥–∞“õ–∏–¥–∞ –∫–µ–ª–∏—à–∏–± –æ–ª–∏–Ω–∞–¥–∏.")
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('info_'))
async def handle_callback_query(query: types.CallbackQuery):
    course = query.data.split('info_')[1]
    keyboard = InlineKeyboardMarkup(row_width=1).add(InlineKeyboardButton("Orqaga", callback_data='back_to_courses'))
    await query.message.answer(f'"{course}" haqida ma\'lumot: {course_info.get(course, "Malumot topilmadi.")}', reply_markup=keyboard)
    await query.answer()

@dp.callback_query_handler(lambda callback_query: callback_query.data == 'back_to_courses')
async def back_to_courses(query: types.CallbackQuery):
    await courses(query.message)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
